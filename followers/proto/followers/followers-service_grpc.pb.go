// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: followers/followers-service.proto

package follower

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowersService_GetProfile_FullMethodName     = "/follower.FollowersService/GetProfile"
	FollowersService_GetFollowers_FullMethodName   = "/follower.FollowersService/GetFollowers"
	FollowersService_GetRecommended_FullMethodName = "/follower.FollowersService/GetRecommended"
	FollowersService_GetFollowing_FullMethodName   = "/follower.FollowersService/GetFollowing"
	FollowersService_IsFollowing_FullMethodName    = "/follower.FollowersService/IsFollowing"
	FollowersService_Follow_FullMethodName         = "/follower.FollowersService/Follow"
	FollowersService_Unfollow_FullMethodName       = "/follower.FollowersService/Unfollow"
)

// FollowersServiceClient is the client API for FollowersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowersServiceClient interface {
	GetProfile(ctx context.Context, in *UserIdRequset, opts ...grpc.CallOption) (*PersonResponse, error)
	GetFollowers(ctx context.Context, in *UserIdRequset, opts ...grpc.CallOption) (*FollowersResponse, error)
	GetRecommended(ctx context.Context, in *UserIdRequset, opts ...grpc.CallOption) (*FollowersResponse, error)
	GetFollowing(ctx context.Context, in *UserIdRequset, opts ...grpc.CallOption) (*FollowersResponse, error)
	IsFollowing(ctx context.Context, in *TwoUserIdRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	Follow(ctx context.Context, in *TwoUserIdRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	Unfollow(ctx context.Context, in *TwoUserIdRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error)
}

type followersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowersServiceClient(cc grpc.ClientConnInterface) FollowersServiceClient {
	return &followersServiceClient{cc}
}

func (c *followersServiceClient) GetProfile(ctx context.Context, in *UserIdRequset, opts ...grpc.CallOption) (*PersonResponse, error) {
	out := new(PersonResponse)
	err := c.cc.Invoke(ctx, FollowersService_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) GetFollowers(ctx context.Context, in *UserIdRequset, opts ...grpc.CallOption) (*FollowersResponse, error) {
	out := new(FollowersResponse)
	err := c.cc.Invoke(ctx, FollowersService_GetFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) GetRecommended(ctx context.Context, in *UserIdRequset, opts ...grpc.CallOption) (*FollowersResponse, error) {
	out := new(FollowersResponse)
	err := c.cc.Invoke(ctx, FollowersService_GetRecommended_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) GetFollowing(ctx context.Context, in *UserIdRequset, opts ...grpc.CallOption) (*FollowersResponse, error) {
	out := new(FollowersResponse)
	err := c.cc.Invoke(ctx, FollowersService_GetFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) IsFollowing(ctx context.Context, in *TwoUserIdRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, FollowersService_IsFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) Follow(ctx context.Context, in *TwoUserIdRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, FollowersService_Follow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) Unfollow(ctx context.Context, in *TwoUserIdRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, FollowersService_Unfollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowersServiceServer is the server API for FollowersService service.
// All implementations must embed UnimplementedFollowersServiceServer
// for forward compatibility
type FollowersServiceServer interface {
	GetProfile(context.Context, *UserIdRequset) (*PersonResponse, error)
	GetFollowers(context.Context, *UserIdRequset) (*FollowersResponse, error)
	GetRecommended(context.Context, *UserIdRequset) (*FollowersResponse, error)
	GetFollowing(context.Context, *UserIdRequset) (*FollowersResponse, error)
	IsFollowing(context.Context, *TwoUserIdRequest) (*StatusCodeResponse, error)
	Follow(context.Context, *TwoUserIdRequest) (*StatusCodeResponse, error)
	Unfollow(context.Context, *TwoUserIdRequest) (*StatusCodeResponse, error)
	mustEmbedUnimplementedFollowersServiceServer()
}

// UnimplementedFollowersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowersServiceServer struct {
}

func (UnimplementedFollowersServiceServer) GetProfile(context.Context, *UserIdRequset) (*PersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedFollowersServiceServer) GetFollowers(context.Context, *UserIdRequset) (*FollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedFollowersServiceServer) GetRecommended(context.Context, *UserIdRequset) (*FollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommended not implemented")
}
func (UnimplementedFollowersServiceServer) GetFollowing(context.Context, *UserIdRequset) (*FollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (UnimplementedFollowersServiceServer) IsFollowing(context.Context, *TwoUserIdRequest) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollowing not implemented")
}
func (UnimplementedFollowersServiceServer) Follow(context.Context, *TwoUserIdRequest) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedFollowersServiceServer) Unfollow(context.Context, *TwoUserIdRequest) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedFollowersServiceServer) mustEmbedUnimplementedFollowersServiceServer() {}

// UnsafeFollowersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowersServiceServer will
// result in compilation errors.
type UnsafeFollowersServiceServer interface {
	mustEmbedUnimplementedFollowersServiceServer()
}

func RegisterFollowersServiceServer(s grpc.ServiceRegistrar, srv FollowersServiceServer) {
	s.RegisterService(&FollowersService_ServiceDesc, srv)
}

func _FollowersService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetProfile(ctx, req.(*UserIdRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetFollowers(ctx, req.(*UserIdRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_GetRecommended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetRecommended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_GetRecommended_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetRecommended(ctx, req.(*UserIdRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_GetFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetFollowing(ctx, req.(*UserIdRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_IsFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).IsFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_IsFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).IsFollowing(ctx, req.(*TwoUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).Follow(ctx, req.(*TwoUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_Unfollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).Unfollow(ctx, req.(*TwoUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowersService_ServiceDesc is the grpc.ServiceDesc for FollowersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "follower.FollowersService",
	HandlerType: (*FollowersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _FollowersService_GetProfile_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _FollowersService_GetFollowers_Handler,
		},
		{
			MethodName: "GetRecommended",
			Handler:    _FollowersService_GetRecommended_Handler,
		},
		{
			MethodName: "GetFollowing",
			Handler:    _FollowersService_GetFollowing_Handler,
		},
		{
			MethodName: "IsFollowing",
			Handler:    _FollowersService_IsFollowing_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _FollowersService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _FollowersService_Unfollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "followers/followers-service.proto",
}
